"""added observationstation

Revision ID: 9c278ecdeb38
Revises: 7b7412888496
Create Date: 2024-12-13 13:07:38.511400

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9c278ecdeb38'
down_revision: Union[str, None] = '7b7412888496'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype').create(op.get_bind())
    sa.Enum('ARPA_V', 'ARPA_FVG', name='observationstationowner').create(op.get_bind())
    op.create_geospatial_table('observationstation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner', postgresql.ENUM('ARPA_V', 'ARPA_FVG', name='observationstationowner', create_type=False), nullable=False),
    sa.Column('geom', Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('altitude_m', sa.Float(), nullable=True),
    sa.Column('active_since', sa.Date(), nullable=True),
    sa.Column('active_until', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_geospatial_index('idx_observationstation_geom', 'observationstation', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_table('observationmeasurement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('measurement_aggregation_type', postgresql.ENUM('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype', create_type=False), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.Column('observation_station_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['observation_station_id'], ['observationstation.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('observationseriesconfiguration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
    sa.Column('indicator_internal_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('measurement_aggregation_type', postgresql.ENUM('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype', create_type=False), nullable=False),
    sa.Column('station_owners', sa.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('observationseriesconfiguration')
    op.drop_table('observationmeasurement')
    op.drop_geospatial_index('idx_observationstation_geom', table_name='observationstation', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('observationstation')
    sa.Enum('ARPA_V', 'ARPA_FVG', name='observationstationowner').drop(op.get_bind())
    sa.Enum('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype').drop(op.get_bind())
    # ### end Alembic commands ###
