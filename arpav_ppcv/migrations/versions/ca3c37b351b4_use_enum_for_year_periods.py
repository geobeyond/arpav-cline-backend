"""use enum for year_periods

Revision ID: ca3c37b351b4
Revises: f2e5cc37ed4c
Create Date: 2025-01-16 15:48:03.721637

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ca3c37b351b4'
down_revision: Union[str, None] = 'f2e5cc37ed4c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    sa.Enum(
        'ALL_YEAR',
        'WINTER',
        'SPRING',
        'SUMMER',
        'AUTUMN',
        name='forecastyearperiod'
    ).create(op.get_bind())
    op.alter_column(
        'forecastcoverageconfiguration',
        'year_periods',
        existing_type=postgresql.ARRAY(sa.VARCHAR()),
        postgresql_using='year_periods::forecastyearperiod[]',
        type_=sa.ARRAY(
            sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod')
        ),
        existing_nullable=True
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('forecastcoverageconfiguration', 'year_periods',
               existing_type=sa.ARRAY(sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod')),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=True)
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod').drop(op.get_bind())
    # ### end Alembic commands ###
