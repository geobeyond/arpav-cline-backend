"""added model and year period groups

Revision ID: 6dbeb73f6b5d
Revises: 2551ade57d32
Create Date: 2025-02-14 17:26:59.194170

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6dbeb73f6b5d'
down_revision: Union[str, None] = '2551ade57d32'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'forecastmodelgroup',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('sort_order', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'forecastyearperiodgroup',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('sort_order', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'historicalyearperiodgroup',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('sort_order', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'forecastmodelforecastmodelgrouplink',
        sa.Column('forecast_model_id', sa.Integer(), nullable=False),
        sa.Column('forecast_model_group_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['forecast_model_group_id'],
            ['forecastmodelgroup.id'],
            onupdate='CASCADE',
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['forecast_model_id'],
            ['forecastmodel.id'],
            onupdate='CASCADE',
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('forecast_model_id', 'forecast_model_group_id')
    )
    op.create_table(
        'forecastcoverageconfigurationforecastmodelgrouplink',
        sa.Column('forecast_coverage_configuration_id', sa.Integer(), nullable=False),
        sa.Column('forecast_model_group_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['forecast_coverage_configuration_id'],
            ['forecastcoverageconfiguration.id'],
            onupdate='CASCADE',
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['forecast_model_group_id'],
            ['forecastmodelgroup.id'],
            onupdate='CASCADE',
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('forecast_coverage_configuration_id', 'forecast_model_group_id')
    )
    op.create_table('forecastcoverageconfigurationforecastyearperiodgrouplink',
                    sa.Column('forecast_coverage_configuration_id', sa.Integer(), nullable=False),
                    sa.Column('forecast_year_period_group_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['forecast_coverage_configuration_id'],
                                            ['forecastcoverageconfiguration.id'], onupdate='CASCADE',
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['forecast_year_period_group_id'], ['forecastyearperiodgroup.id'],
                                            onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('forecast_coverage_configuration_id', 'forecast_year_period_group_id')
                    )
    op.create_table('historicalcoverageconfigurationhistoricalyearperiodgrouplink',
                    sa.Column('historical_coverage_configuration_id', sa.Integer(), nullable=False),
                    sa.Column('historical_year_period_group_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['historical_coverage_configuration_id'],
                                            ['historicalcoverageconfiguration.id'], onupdate='CASCADE',
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['historical_year_period_group_id'], ['historicalyearperiodgroup.id'],
                                            onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('historical_coverage_configuration_id', 'historical_year_period_group_id')
                    )
    op.drop_column('forecastcoverageconfiguration', 'year_periods')
    op.drop_column('historicalcoverageconfiguration', 'year_periods')
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod').drop(op.get_bind())
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', 'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE',
            'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER', name='historicalyearperiod').drop(
        op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', 'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER', name='historicalyearperiod').create(op.get_bind())
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod').create(op.get_bind())
    op.add_column('historicalcoverageconfiguration', sa.Column('year_periods', postgresql.ARRAY(postgresql.ENUM('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', 'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER', name='historicalyearperiod', create_type=False)), autoincrement=False, nullable=True))
    op.add_column('forecastcoverageconfiguration', sa.Column('year_periods', postgresql.ARRAY(postgresql.ENUM('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod', create_type=False)), autoincrement=False, nullable=True))
    op.drop_table('historicalcoverageconfigurationhistoricalyearperiodgrouplink')
    op.drop_table('forecastcoverageconfigurationforecastyearperiodgrouplink')
    op.drop_table('forecastcoverageconfigurationforecastmodelgrouplink')
    op.drop_table('forecastmodelforecastmodelgrouplink')
    op.drop_table('historicalyearperiodgroup')
    op.drop_table('forecastyearperiodgroup')
    op.drop_table('forecastmodelgroup')
    # ### end Alembic commands ###
