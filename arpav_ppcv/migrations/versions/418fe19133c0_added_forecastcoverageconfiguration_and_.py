"""added forecastcoverageconfiguration and related

Revision ID: 418fe19133c0
Revises: 423274dc64be
Create Date: 2025-01-13 15:26:01.350240

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from geoalchemy2 import Geometry

# revision identifiers, used by Alembic.
revision: str = '418fe19133c0'
down_revision: Union[str, None] = '423274dc64be'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'forecastmodel',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('internal_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('coverage_base_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('sort_order', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'forecasttimewindow',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('internal_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('sort_order', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_table(
        'spatialregion',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('sort_order', sa.Integer(), nullable=False),
        sa.Column(
            'geom',
            Geometry(
                geometry_type='MULTIPOLYGON',
                srid=4326,
                spatial_index=False,
                from_text='ST_GeomFromEWKT',
                name='geometry'
            ),
            nullable=True
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_index(
        'idx_spatialregion_geom',
        'spatialregion',
        ['geom'],
        unique=False,
        postgresql_using='gist',
        postgresql_ops={}
    )
    op.create_table(
        'forecastcoverageconfiguration',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('wms_main_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('wms_secondary_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
        sa.Column('spatial_region_id', sa.Integer(), nullable=True),
        sa.Column('lower_uncertainty_thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('upper_uncertainty_thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('scenarios', sa.ARRAY(sa.String()), nullable=True),
        sa.Column('year_periods', sa.ARRAY(sa.String()), nullable=True),
        sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
        sa.ForeignKeyConstraint(['spatial_region_id'], ['spatialregion.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'historicalcoverageconfiguration',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('wms_main_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('wms_secondary_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
        sa.Column('spatial_region_id', sa.Integer(), nullable=True),
        sa.Column('year_periods', sa.ARRAY(sa.String()), nullable=True),
        sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
        sa.ForeignKeyConstraint(['spatial_region_id'], ['spatialregion.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'forecastcoverageconfigurationforecastmodellink',
        sa.Column('forecast_coverage_configuration_id', sa.Integer(), nullable=False),
        sa.Column('forecast_model_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['forecast_coverage_configuration_id'], ['forecastcoverageconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['forecast_model_id'], ['forecastmodel.id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('forecast_coverage_configuration_id', 'forecast_model_id')
    )
    op.create_table(
        'forecastcoverageconfigurationforecasttimewindowlink',
        sa.Column('forecast_coverage_configuration_id', sa.Integer(), nullable=False),
        sa.Column('forecast_time_window_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['forecast_coverage_configuration_id'], ['forecastcoverageconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['forecast_time_window_id'], ['forecasttimewindow.id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('forecast_coverage_configuration_id', 'forecast_time_window_id')
    )
    op.create_table(
        'forecastcoverageconfigurationobservationseriesconfigurationlink',
        sa.Column('forecast_coverage_configuration_id', sa.Integer(), nullable=False),
        sa.Column('observation_series_configuration_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['forecast_coverage_configuration_id'], ['forecastcoverageconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['observation_series_configuration_id'], ['observationseriesconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('forecast_coverage_configuration_id', 'observation_series_configuration_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('forecastcoverageconfigurationobservationseriesconfigurationlink')
    op.drop_table('forecastcoverageconfigurationforecasttimewindowlink')
    op.drop_table('forecastcoverageconfigurationforecastmodellink')
    op.drop_table('historicalcoverageconfiguration')
    op.drop_table('forecastcoverageconfiguration')
    op.drop_geospatial_index('idx_spatialregion_geom', table_name='spatialregion', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('spatialregion')
    op.drop_table('forecasttimewindow')
    op.drop_table('forecastmodel')
    # ### end Alembic commands ###
