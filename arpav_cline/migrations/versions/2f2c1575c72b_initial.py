"""initial

Revision ID: 2f2c1575c72b
Revises:
Create Date: 2025-02-21 16:50:54.925074

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2f2c1575c72b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype').create(op.get_bind())
    sa.Enum('ARPAV', 'ARPAFVG', name='observationstationmanager').create(op.get_bind())
    sa.Enum('WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='season').create(op.get_bind())
    sa.Enum('DECADE_1961_1970', 'DECADE_1971_1980', 'DECADE_1981_1990', 'DECADE_1991_2000', 'DECADE_2001_2010', 'DECADE_2011_2020', 'DECADE_2021_2030', 'DECADE_2031_2040', name='historicaldecade').create(op.get_bind())
    sa.Enum('CLIMATE_STANDARD_NORMAL_1961_1990', 'CLIMATE_STANDARD_NORMAL_1991_2020', name='historicalreferenceperiod').create(op.get_bind())
    sa.Enum('RCP26', 'RCP45', 'RCP85', name='forecastscenario').create(op.get_bind())
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', 'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER', name='historicalyearperiod').create(op.get_bind())
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod').create(op.get_bind())
    sa.Enum('ANNUAL', 'TEN_YEAR', 'THIRTY_YEAR', name='aggregationperiod').create(op.get_bind())
    sa.Enum('ABSOLUTE', 'ANOMALY', name='measuretype').create(op.get_bind())
    op.create_table('climaticindicator',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('historical_coverages_internal_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('measure_type', postgresql.ENUM('ABSOLUTE', 'ANOMALY', name='measuretype', create_type=False), nullable=False),
    sa.Column('aggregation_period', postgresql.ENUM('ANNUAL', 'TEN_YEAR', 'THIRTY_YEAR', name='aggregationperiod', create_type=False), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('unit_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('unit_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('palette', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('color_scale_min', sa.Float(), nullable=False),
    sa.Column('color_scale_max', sa.Float(), nullable=False),
    sa.Column('data_precision', sa.Integer(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('configurationparameter',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_configurationparameter_name'), 'configurationparameter', ['name'], unique=True)
    op.create_table('forecastmodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('internal_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('forecastmodelgroup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('forecasttimewindow',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('internal_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('forecastyearperiodgroup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('year_periods', sa.ARRAY(postgresql.ENUM('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod', create_type=False)), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('historicalyearperiodgroup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('year_periods', sa.ARRAY(postgresql.ENUM('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', 'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER', name='historicalyearperiod', create_type=False)), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_table('municipality',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('geom', Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('province_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('region_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('centroid_epsg_4326_lon', sa.Float(), nullable=True),
    sa.Column('centroid_epsg_4326_lat', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_index('idx_municipality_geom', 'municipality', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_geospatial_table('observationstation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('managed_by', postgresql.ENUM('ARPAV', 'ARPAFVG', name='observationstationmanager', create_type=False), nullable=False),
    sa.Column('geom', Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('altitude_m', sa.Float(), nullable=True),
    sa.Column('active_since', sa.Date(), nullable=True),
    sa.Column('active_until', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_geospatial_index('idx_observationstation_geom', 'observationstation', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_geospatial_table('spatialregion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('internal_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('geom', Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_geospatial_index('idx_spatialregion_geom', 'spatialregion', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_geospatial_table('station',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('geom', Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('active_since', sa.Date(), nullable=True),
    sa.Column('active_until', sa.Date(), nullable=True),
    sa.Column('altitude_m', sa.Float(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type_', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_geospatial_index('idx_station_geom', 'station', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_table('climaticindicatorobservationname',
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.Column('station_manager', postgresql.ENUM('ARPAV', 'ARPAFVG', name='observationstationmanager', create_type=False), nullable=False),
    sa.Column('indicator_observation_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('climatic_indicator_id', 'station_manager')
    )
    op.create_table('configurationparametervalue',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('internal_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name_english', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('display_name_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description_english', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description_italian', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('configuration_parameter_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['configuration_parameter_id'], ['configurationparameter.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('coverageconfiguration',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('wms_main_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('wms_secondary_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
    sa.Column('uncertainty_lower_bounds_coverage_configuration_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('uncertainty_upper_bounds_coverage_configuration_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
    sa.ForeignKeyConstraint(['uncertainty_lower_bounds_coverage_configuration_id'], ['coverageconfiguration.id'], ),
    sa.ForeignKeyConstraint(['uncertainty_upper_bounds_coverage_configuration_id'], ['coverageconfiguration.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_coverageconfiguration_name'), 'coverageconfiguration', ['name'], unique=True)
    op.create_table('forecastcoverageconfiguration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
    sa.Column('spatial_region_id', sa.Integer(), nullable=True),
    sa.Column('forecast_model_group_id', sa.Integer(), nullable=True),
    sa.Column('year_period_group_id', sa.Integer(), nullable=True),
    sa.Column('wms_main_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('wms_secondary_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('lower_uncertainty_thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('lower_uncertainty_netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('upper_uncertainty_thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('upper_uncertainty_netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('scenarios', sa.ARRAY(postgresql.ENUM('RCP26', 'RCP45', 'RCP85', name='forecastscenario', create_type=False)), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
    sa.ForeignKeyConstraint(['forecast_model_group_id'], ['forecastmodelgroup.id'], ),
    sa.ForeignKeyConstraint(['spatial_region_id'], ['spatialregion.id'], ),
    sa.ForeignKeyConstraint(['year_period_group_id'], ['forecastyearperiodgroup.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('forecastmodelclimaticindicatorlink',
    sa.Column('forecast_model_id', sa.Integer(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.Column('thredds_url_base_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('thredds_url_uncertainties_base_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['forecast_model_id'], ['forecastmodel.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('forecast_model_id', 'climatic_indicator_id')
    )
    op.create_table('forecastmodelforecastmodelgrouplink',
    sa.Column('forecast_model_id', sa.Integer(), nullable=False),
    sa.Column('forecast_model_group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['forecast_model_group_id'], ['forecastmodelgroup.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['forecast_model_id'], ['forecastmodel.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('forecast_model_id', 'forecast_model_group_id')
    )
    op.create_table('forecastoverviewseriesconfiguration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
    sa.Column('lower_uncertainty_thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('lower_uncertainty_netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('upper_uncertainty_thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('upper_uncertainty_netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('scenarios', sa.ARRAY(postgresql.ENUM('RCP26', 'RCP45', 'RCP85', name='forecastscenario', create_type=False)), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('historicalcoverageconfiguration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
    sa.Column('spatial_region_id', sa.Integer(), nullable=True),
    sa.Column('year_period_group_id', sa.Integer(), nullable=True),
    sa.Column('reference_period', postgresql.ENUM('CLIMATE_STANDARD_NORMAL_1961_1990', 'CLIMATE_STANDARD_NORMAL_1991_2020', name='historicalreferenceperiod', create_type=False), nullable=True),
    sa.Column('wms_main_layer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('decades', sa.ARRAY(postgresql.ENUM('DECADE_1961_1970', 'DECADE_1971_1980', 'DECADE_1981_1990', 'DECADE_1991_2000', 'DECADE_2001_2010', 'DECADE_2011_2020', 'DECADE_2021_2030', 'DECADE_2031_2040', name='historicaldecade', create_type=False)), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
    sa.ForeignKeyConstraint(['spatial_region_id'], ['spatialregion.id'], ),
    sa.ForeignKeyConstraint(['year_period_group_id'], ['historicalyearperiodgroup.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('monthlymeasurement',
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('station_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('observationmeasurement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('measurement_aggregation_type', postgresql.ENUM('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype', create_type=False), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.Column('observation_station_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['observation_station_id'], ['observationstation.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('observationoverviewseriesconfiguration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('netcdf_main_dataset_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('thredds_url_pattern', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('observationseriesconfiguration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=True),
    sa.Column('measurement_aggregation_type', postgresql.ENUM('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype', create_type=False), nullable=False),
    sa.Column('station_managers', sa.ARRAY(postgresql.ENUM('ARPAV', 'ARPAFVG', name='observationstationmanager', create_type=False)), nullable=True),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('observationstationclimaticindicatorlink',
    sa.Column('observation_station_id', sa.Integer(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['observation_station_id'], ['observationstation.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('observation_station_id', 'climatic_indicator_id')
    )
    op.create_table('seasonalmeasurement',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('station_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('season', postgresql.ENUM('WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='season', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('yearlymeasurement',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('station_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('climatic_indicator_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['climatic_indicator_id'], ['climaticindicator.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('configurationparameterpossiblevalue',
    sa.Column('coverage_configuration_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('configuration_parameter_value_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['configuration_parameter_value_id'], ['configurationparametervalue.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['coverage_configuration_id'], ['coverageconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('coverage_configuration_id', 'configuration_parameter_value_id')
    )
    op.create_table('forecastcoverageconfigurationforecasttimewindowlink',
    sa.Column('forecast_coverage_configuration_id', sa.Integer(), nullable=False),
    sa.Column('forecast_time_window_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['forecast_coverage_configuration_id'], ['forecastcoverageconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['forecast_time_window_id'], ['forecasttimewindow.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('forecast_coverage_configuration_id', 'forecast_time_window_id')
    )
    op.create_table('forecastcoverageconfigurationobservationseriesconfigurationlink',
    sa.Column('forecast_coverage_configuration_id', sa.Integer(), nullable=False),
    sa.Column('observation_series_configuration_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['forecast_coverage_configuration_id'], ['forecastcoverageconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['observation_series_configuration_id'], ['observationseriesconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('forecast_coverage_configuration_id', 'observation_series_configuration_id')
    )
    op.create_table('historicalcovconfobservationseriesconflink',
    sa.Column('historical_coverage_configuration_id', sa.Integer(), nullable=False),
    sa.Column('observation_series_configuration_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['historical_coverage_configuration_id'], ['historicalcoverageconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['observation_series_configuration_id'], ['observationseriesconfiguration.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('historical_coverage_configuration_id', 'observation_series_configuration_id')
    )
    op.create_table('relatedcoverageconfiguration',
    sa.Column('main_coverage_configuration_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('secondary_coverage_configuration_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['main_coverage_configuration_id'], ['coverageconfiguration.id'], ),
    sa.ForeignKeyConstraint(['secondary_coverage_configuration_id'], ['coverageconfiguration.id'], ),
    sa.PrimaryKeyConstraint('main_coverage_configuration_id', 'secondary_coverage_configuration_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('relatedcoverageconfiguration')
    op.drop_table('historicalcovconfobservationseriesconflink')
    op.drop_table('forecastcoverageconfigurationobservationseriesconfigurationlink')
    op.drop_table('forecastcoverageconfigurationforecasttimewindowlink')
    op.drop_table('configurationparameterpossiblevalue')
    op.drop_table('yearlymeasurement')
    op.drop_table('seasonalmeasurement')
    op.drop_table('observationstationclimaticindicatorlink')
    op.drop_table('observationseriesconfiguration')
    op.drop_table('observationoverviewseriesconfiguration')
    op.drop_table('observationmeasurement')
    op.drop_table('monthlymeasurement')
    op.drop_table('historicalcoverageconfiguration')
    op.drop_table('forecastoverviewseriesconfiguration')
    op.drop_table('forecastmodelforecastmodelgrouplink')
    op.drop_table('forecastmodelclimaticindicatorlink')
    op.drop_table('forecastcoverageconfiguration')
    op.drop_index(op.f('ix_coverageconfiguration_name'), table_name='coverageconfiguration')
    op.drop_table('coverageconfiguration')
    op.drop_table('configurationparametervalue')
    op.drop_table('climaticindicatorobservationname')
    op.drop_geospatial_index('idx_station_geom', table_name='station', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('station')
    op.drop_geospatial_index('idx_spatialregion_geom', table_name='spatialregion', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('spatialregion')
    op.drop_geospatial_index('idx_observationstation_geom', table_name='observationstation', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('observationstation')
    op.drop_geospatial_index('idx_municipality_geom', table_name='municipality', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('municipality')
    op.drop_table('historicalyearperiodgroup')
    op.drop_table('forecastyearperiodgroup')
    op.drop_table('forecasttimewindow')
    op.drop_table('forecastmodelgroup')
    op.drop_table('forecastmodel')
    op.drop_index(op.f('ix_configurationparameter_name'), table_name='configurationparameter')
    op.drop_table('configurationparameter')
    op.drop_table('climaticindicator')
    sa.Enum('ABSOLUTE', 'ANOMALY', name='measuretype').drop(op.get_bind())
    sa.Enum('ANNUAL', 'TEN_YEAR', 'THIRTY_YEAR', name='aggregationperiod').drop(op.get_bind())
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='forecastyearperiod').drop(op.get_bind())
    sa.Enum('ALL_YEAR', 'WINTER', 'SPRING', 'SUMMER', 'AUTUMN', 'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER', name='historicalyearperiod').drop(op.get_bind())
    sa.Enum('RCP26', 'RCP45', 'RCP85', name='forecastscenario').drop(op.get_bind())
    sa.Enum('CLIMATE_STANDARD_NORMAL_1961_1990', 'CLIMATE_STANDARD_NORMAL_1991_2020', name='historicalreferenceperiod').drop(op.get_bind())
    sa.Enum('DECADE_1961_1970', 'DECADE_1971_1980', 'DECADE_1981_1990', 'DECADE_1991_2000', 'DECADE_2001_2010', 'DECADE_2011_2020', 'DECADE_2021_2030', 'DECADE_2031_2040', name='historicaldecade').drop(op.get_bind())
    sa.Enum('WINTER', 'SPRING', 'SUMMER', 'AUTUMN', name='season').drop(op.get_bind())
    sa.Enum('ARPAV', 'ARPAFVG', name='observationstationmanager').drop(op.get_bind())
    sa.Enum('MONTHLY', 'SEASONAL', 'YEARLY', name='measurementaggregationtype').drop(op.get_bind())
    # ### end Alembic commands ###
